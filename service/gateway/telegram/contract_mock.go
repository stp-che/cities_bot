// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package telegram is a generated GoMock package.
package telegram

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockGameEngine is a mock of GameEngine interface.
type MockGameEngine struct {
	ctrl     *gomock.Controller
	recorder *MockGameEngineMockRecorder
}

// MockGameEngineMockRecorder is the mock recorder for MockGameEngine.
type MockGameEngineMockRecorder struct {
	mock *MockGameEngine
}

// NewMockGameEngine creates a new mock instance.
func NewMockGameEngine(ctrl *gomock.Controller) *MockGameEngine {
	mock := &MockGameEngine{ctrl: ctrl}
	mock.recorder = &MockGameEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGameEngine) EXPECT() *MockGameEngineMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockGameEngine) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockGameEngineMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockGameEngine)(nil).Name))
}

// Play mocks base method.
func (m *MockGameEngine) Play(arg0 context.Context) (*uuid.UUID, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Play", arg0)
	ret0, _ := ret[0].(*uuid.UUID)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Play indicates an expected call of Play.
func (mr *MockGameEngineMockRecorder) Play(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Play", reflect.TypeOf((*MockGameEngine)(nil).Play), arg0)
}

// Quit mocks base method.
func (m *MockGameEngine) Quit(arg0 context.Context, arg1 uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Quit", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Quit indicates an expected call of Quit.
func (mr *MockGameEngineMockRecorder) Quit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quit", reflect.TypeOf((*MockGameEngine)(nil).Quit), arg0, arg1)
}

// ReceiveMessage mocks base method.
func (m *MockGameEngine) ReceiveMessage(arg0 context.Context, arg1 uuid.UUID, arg2 string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveMessage", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReceiveMessage indicates an expected call of ReceiveMessage.
func (mr *MockGameEngineMockRecorder) ReceiveMessage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveMessage", reflect.TypeOf((*MockGameEngine)(nil).ReceiveMessage), arg0, arg1, arg2)
}

// Yield mocks base method.
func (m *MockGameEngine) Yield(arg0 context.Context, arg1 uuid.UUID) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Yield", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Yield indicates an expected call of Yield.
func (mr *MockGameEngineMockRecorder) Yield(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Yield", reflect.TypeOf((*MockGameEngine)(nil).Yield), arg0, arg1)
}
